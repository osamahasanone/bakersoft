"""
Django settings for server project.

Generated by 'django-admin startproject' using Django 2.2.28.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os
from datetime import timedelta

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "7c5jxb=+^-@(cdn7z*egcu+@3e(0oi3%j(l(m=%*bpuo&e^*rg"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["0.0.0.0"]


# Application definition

INSTALLED_APPS = [
    "core.apps.CoreConfig",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "rest_framework.authtoken",
    "djoser",
    "work_tracking.apps.WorkTrackingConfig",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "server.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "server.wsgi.application"


# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.environ.get("POSTGRES_NAME"),
        "USER": os.environ.get("POSTGRES_USER"),
        "PASSWORD": os.environ.get("POSTGRES_PASSWORD"),
        "HOST": "db",
        "PORT": 5432,
    }
}


# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",  # Noqa
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",  # Noqa
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",  # Noqa
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",  # Noqa
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = "/static/"

# Auth
AUTH_USER_MODEL = "core.User"

# DRF
# https://www.django-rest-framework.org/
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ),
    "EXCEPTION_HANDLER": "core.exceptions.api_exception_handler",
}

# Djoser
# https://djoser.readthedocs.io/en/latest/introduction.html
SIMPLE_JWT = {
    "AUTH_HEADER_TYPES": ("JWT",),
    "ACCESS_TOKEN_LIFETIME": timedelta(days=1),
}  # Noqa

DJOSER = {
    "SERIALIZERS": {"user_create": "core.serializers.UserCreateSerializer"}
}  # Noqa

# Celery
# ------------------------------------------------------------------------------
import ssl  # NOQA
from datetime import timedelta  # NOQA

from celery.schedules import crontab  # Noqa

INSTALLED_APPS += ["django_celery_results", "django_celery_beat"]

CELERY_BROKER_URL = "redis://:password@redis:6379/"
CELERY_RESULT_BACKEND = "django-db"
CELERY_TASK_STORE_ERRORS_EVEN_IF_IGNORED = True
CELERY_TASK_SERIALIZER = "json"
CELERY_RESULT_EXPIRES = timedelta(hours=1)
CELERY_BEAT_SCHEDULER = "django_celery_beat.schedulers:DatabaseScheduler"
CELERY_BEAT_SCHEDULE = {
    "notify_team_leaders_about_tasks_overdue_soon": {
        "task": "work_tracking.tasks.notify_team_leaders_about_tasks_overdue_soon",  # Noqa
        "schedule": crontab(hour=1, minute=59),
    }
}

CELERY_WORKER_MAX_TASKS_PER_CHILD = 2000
CELERY_WORKER_POOL_RESTARTS = True
CELERY_WORKER_HIJACK_ROOT_LOGGER = False
CELERYD_MAX_TASKS_PER_CHILD = 2000
CELERY_MAX_TASKS_PER_CHILD = 2000
CELERY_TASK_QUEUES = []
CELERY_TASK_QUEUE_HA_POLICY = "all"

CELERY_TASK_ROUTES = ["core.celery.task_router.task_router"]
